// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ensm_cluster_mean
Rcpp::List ensm_cluster_mean(arma::mat Y_input, arma::mat X_input, const arma::mat A_block_input, const int L, const double lambda_input, const double eta_input, const double sigma_py_input, const int max_iter_input, double a1_input, double a2_input, double b1_input, double b2_input, double alpha_sigma_input, double beta_sigma_input, int opt_method_input, int opt_Y_input, int priorA_input, int priorB_input, bool Kmeans_initialize, int k_A, int k_B, Rcpp::Nullable<Rcpp::NumericVector> ks_A_, Rcpp::Nullable<Rcpp::NumericVector> ks_B_, const double rho_input, const double eps, double split_frac_input, double A_or_B_first_input, bool resampling_input, Rcpp::List gamma_init_A, Rcpp::List gamma_init_B, Rcpp::Nullable<Rcpp::NumericVector> w_init_, bool sampleA_input, bool sampleB_input, bool last_islands, bool verbose);
RcppExport SEXP _PARTOPT_ensm_cluster_mean(SEXP Y_inputSEXP, SEXP X_inputSEXP, SEXP A_block_inputSEXP, SEXP LSEXP, SEXP lambda_inputSEXP, SEXP eta_inputSEXP, SEXP sigma_py_inputSEXP, SEXP max_iter_inputSEXP, SEXP a1_inputSEXP, SEXP a2_inputSEXP, SEXP b1_inputSEXP, SEXP b2_inputSEXP, SEXP alpha_sigma_inputSEXP, SEXP beta_sigma_inputSEXP, SEXP opt_method_inputSEXP, SEXP opt_Y_inputSEXP, SEXP priorA_inputSEXP, SEXP priorB_inputSEXP, SEXP Kmeans_initializeSEXP, SEXP k_ASEXP, SEXP k_BSEXP, SEXP ks_A_SEXP, SEXP ks_B_SEXP, SEXP rho_inputSEXP, SEXP epsSEXP, SEXP split_frac_inputSEXP, SEXP A_or_B_first_inputSEXP, SEXP resampling_inputSEXP, SEXP gamma_init_ASEXP, SEXP gamma_init_BSEXP, SEXP w_init_SEXP, SEXP sampleA_inputSEXP, SEXP sampleB_inputSEXP, SEXP last_islandsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y_input(Y_inputSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_input(X_inputSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type A_block_input(A_block_inputSEXP);
    Rcpp::traits::input_parameter< const int >::type L(LSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_input(lambda_inputSEXP);
    Rcpp::traits::input_parameter< const double >::type eta_input(eta_inputSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_py_input(sigma_py_inputSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter_input(max_iter_inputSEXP);
    Rcpp::traits::input_parameter< double >::type a1_input(a1_inputSEXP);
    Rcpp::traits::input_parameter< double >::type a2_input(a2_inputSEXP);
    Rcpp::traits::input_parameter< double >::type b1_input(b1_inputSEXP);
    Rcpp::traits::input_parameter< double >::type b2_input(b2_inputSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_sigma_input(alpha_sigma_inputSEXP);
    Rcpp::traits::input_parameter< double >::type beta_sigma_input(beta_sigma_inputSEXP);
    Rcpp::traits::input_parameter< int >::type opt_method_input(opt_method_inputSEXP);
    Rcpp::traits::input_parameter< int >::type opt_Y_input(opt_Y_inputSEXP);
    Rcpp::traits::input_parameter< int >::type priorA_input(priorA_inputSEXP);
    Rcpp::traits::input_parameter< int >::type priorB_input(priorB_inputSEXP);
    Rcpp::traits::input_parameter< bool >::type Kmeans_initialize(Kmeans_initializeSEXP);
    Rcpp::traits::input_parameter< int >::type k_A(k_ASEXP);
    Rcpp::traits::input_parameter< int >::type k_B(k_BSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type ks_A_(ks_A_SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type ks_B_(ks_B_SEXP);
    Rcpp::traits::input_parameter< const double >::type rho_input(rho_inputSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type split_frac_input(split_frac_inputSEXP);
    Rcpp::traits::input_parameter< double >::type A_or_B_first_input(A_or_B_first_inputSEXP);
    Rcpp::traits::input_parameter< bool >::type resampling_input(resampling_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type gamma_init_A(gamma_init_ASEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type gamma_init_B(gamma_init_BSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type w_init_(w_init_SEXP);
    Rcpp::traits::input_parameter< bool >::type sampleA_input(sampleA_inputSEXP);
    Rcpp::traits::input_parameter< bool >::type sampleB_input(sampleB_inputSEXP);
    Rcpp::traits::input_parameter< bool >::type last_islands(last_islandsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(ensm_cluster_mean(Y_input, X_input, A_block_input, L, lambda_input, eta_input, sigma_py_input, max_iter_input, a1_input, a2_input, b1_input, b2_input, alpha_sigma_input, beta_sigma_input, opt_method_input, opt_Y_input, priorA_input, priorB_input, Kmeans_initialize, k_A, k_B, ks_A_, ks_B_, rho_input, eps, split_frac_input, A_or_B_first_input, resampling_input, gamma_init_A, gamma_init_B, w_init_, sampleA_input, sampleB_input, last_islands, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PARTOPT_ensm_cluster_mean", (DL_FUNC) &_PARTOPT_ensm_cluster_mean, 35},
    {NULL, NULL, 0}
};

RcppExport void R_init_PARTOPT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
